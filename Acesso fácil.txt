import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Função para inserir dados nas tabelas com verificação de duplicação
def inserir_dados(tabela, nome, descricao, local, horario, contatos):
    cursor.execute(f'SELECT * FROM {tabela} WHERE nome=? AND local=?', (nome, local))
    if cursor.fetchone() is None:
        cursor.execute(f'''
        INSERT INTO {tabela} (nome, descricao, local, horario_funcionamento, contatos)
        VALUES (?, ?, ?, ?, ?)''', (nome, descricao, local, horario, contatos))
        conn.commit()
    else:
        messagebox.showwarning("Aviso", f"O serviço '{nome}' já existe na tabela {tabela}.")

# Função para exibir dados na tabela Treeview
def exibir_dados(tabela):
    cursor.execute(f'SELECT * FROM {tabela}')
    resultados = cursor.fetchall()
    for row in resultados:
        tree.insert("", "end", values=row)

# Função para atualizar a exibição da tabela selecionada
def mostrar_tabela(tabela):
    # Limpa os dados atuais no Treeview
    for item in tree.get_children():
        tree.delete(item)
    # Exibe os dados da tabela selecionada
    exibir_dados(tabela)

# Conexão com o banco de dados SQLite
conn = sqlite3.connect('servicos_publicos.db')
cursor = conn.cursor()

# Criação das tabelas no banco de dados
tabelas = {
    'Saude': '''
    CREATE TABLE IF NOT EXISTS Saude (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        local TEXT,
        horario_funcionamento TEXT,
        contatos TEXT
    )''',
    'Educacao': '''
    CREATE TABLE IF NOT EXISTS Educacao (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        local TEXT,
        horario_funcionamento TEXT,
        contatos TEXT
    )''',
    'Seguranca': '''
    CREATE TABLE IF NOT EXISTS Seguranca (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        local TEXT,
        horario_funcionamento TEXT,
        contatos TEXT
    )''',
    'AssistenciaSocial': '''
    CREATE TABLE IF NOT EXISTS AssistenciaSocial (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        local TEXT,
        horario_funcionamento TEXT,
        contatos TEXT
    )''',
    'ColetaLixo': '''
    CREATE TABLE IF NOT EXISTS ColetaLixo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        descricao TEXT,
        local TEXT,
        horario_funcionamento TEXT,
        contatos TEXT
    )'''
}

# Criação das tabelas no banco de dados
for tabela, sql in tabelas.items():
    cursor.execute(sql)

# Dados de exemplo
dados = {
    'Saude': [
        ('UPA Novo Mundo', 'Atendimento de urgência e emergência', 'Av. Brasília, 2741', '24 horas', '41 3313-2800'),
        ('Unidade de Saúde Novo Mundo', 'Atendimento médico e odontológico', 'Rua Cel. João Guilherme Guimarães, 99', '7h - 19h', '41 3378-3818'),
        # Adicionar outros dados aqui...
    ],
    'Educacao': [
        ('Escola Estadual Novo Mundo', 'Ensino fundamental e médio', 'Rua Ten. Francisco Ferreira de Souza, 140', '7h - 17h', '41 3287-0125'),
        ('Colégio Estadual Padre João Bagozzi', 'Ensino fundamental e médio', 'Rua Caetano Marchesini, 950', '7h - 17h', '41 3248-1266'),
        # Adicionar outros dados aqui...
    ],
    'Seguranca': [
        ('14º Batalhão da Polícia Militar', 'Segurança e patrulhamento', 'Av. Brasília, 5117', '24 horas', '41 3324-5444'),
        ('Delegacia de Polícia Civil Novo Mundo', 'Investigação e segurança pública', 'Rua Raul Pompéia, 240', '8h - 18h', '41 3275-1616'),
        # Adicionar outros dados aqui...
    ],
    'AssistenciaSocial': [
        ('CRAS Novo Mundo', 'Apoio a famílias e indivíduos em situação de vulnerabilidade', 'Rua Ten. Francisco Ferreira de Souza, 240', '8h - 17h', '41 3287-0130'),
        ('CRAS Capão Raso', 'Apoio a famílias e indivíduos em situação de vulnerabilidade', 'Rua Frei Teófilo, 960', '8h - 17h', '41 3374-1197'),
        # Adicionar outros dados aqui...
    ],
    'ColetaLixo': [
        ('Coleta Seletiva Novo Mundo', 'Coleta regular de lixo reciclável', 'Rua Ten. Francisco Ferreira de Souza, 140', '6h - 14h', '41 3287-0125'),
        ('Coleta Orgânica Novo Mundo', 'Coleta regular de lixo orgânico', 'Rua Ten. Francisco Ferreira de Souza, 240', '6h - 14h', '41 3287-0126'),
        # Adicionar outros dados aqui...
    ]
}

# Inserir os dados no banco de dados
for tabela, dados_tabela in dados.items():
    for item in dados_tabela:
        inserir_dados(tabela, *item)

# Configuração da janela principal
root = tk.Tk()
root.title("Serviços Públicos Novo Mundo - Curitiba")
root.geometry("800x600")

# Configuração do Frame principal para centralizar o conteúdo
frame_principal = tk.Frame(root)
frame_principal.pack(expand=True)

# Configuração do Treeview centralizado
tree = ttk.Treeview(frame_principal,
                    columns=("ID", "Nome", "Descrição", "Local", "Horário", "Contatos"),
                    show="headings", height=10)
tree.heading("ID", text="ID")
tree.heading("Nome", text="Nome")
tree.heading("Descrição", text="Descrição")
tree.heading("Local", text="Local")
tree.heading("Horário", text="Horário")
tree.heading("Contatos", text="Contatos")

# Centralizar os textos nas colunas
for col in tree["columns"]:
    tree.column(col, anchor="center")

tree.pack(pady=20, fill="x")

# Frame para os botões
frame_botoes = tk.Frame(frame_principal)
frame_botoes.pack(pady=10)

# Botões para mostrar as tabelas
for tabela, texto in [("Saude", "Mostrar Saúde"),
                      ("Educacao", "Mostrar Educação"),
                      ("Seguranca", "Mostrar Segurança"),
                      ("AssistenciaSocial", "Mostrar Assistência Social"),
                      ("ColetaLixo", "Mostrar Coleta de Lixo")]:
    ttk.Button(frame_botoes, text=texto,
               command=lambda t=tabela: mostrar_tabela(t)).pack(side="left", padx=10)

root.mainloop()

# Fechando a conexão com o banco de dados ao encerrar o aplicativo
conn.close()
